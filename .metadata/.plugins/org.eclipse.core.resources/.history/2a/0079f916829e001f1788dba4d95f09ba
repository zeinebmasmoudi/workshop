package com.ensi.controllers;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import com.ensi.entities.Article;
import com.ensi.repository.ArticleRepository;
import com.ensi.repository.ProviderRepository;
import com.ensi.exception.ResourceNotFoundException;
import java.util.List;
import jakarta.validation.Valid;
package com.ensi.controllers;


@RestController
@RequestMapping("/articles")
public class ArticleRestController {

    private final ArticleRepository articleRepository;
    private final ProviderRepository providerRepository;

    @Autowired
    public ArticleRestController(ArticleRepository articleRepository,
                                 ProviderRepository providerRepository) {
        this.articleRepository = articleRepository;
        this.providerRepository = providerRepository;
    }

    // Get all articles
    @GetMapping("/list")
    public List<Article> getAllArticles() {
        return articleRepository.findAll();
    }

    // Create a new article with a specific provider
    @PostMapping("/add/{providerId}")
    public Article createArticle(@PathVariable(value = "providerId") Long providerId,
                                 @Valid @RequestBody Article article) {
        return providerRepository.findById(providerId).map(provider -> {
            article.setProvider(provider);
            return articleRepository.save(article);
        }).orElseThrow(() -> new ResourceNotFoundException("ProviderId " + providerId + " not found"));
    }

    // Update an existing article
    @PutMapping("/update/{providerId}/{articleId}")
    public Article updateArticle(@PathVariable(value = "providerId") Long providerId,
                                 @PathVariable(value = "articleId") Long articleId,
                                 @Valid @RequestBody Article articleRequest) {
        if (!providerRepository.existsById(providerId)) {
            throw new ResourceNotFoundException("ProviderId " + providerId + " not found");
        }

        return articleRepository.findById(articleId).map(article -> {
            article.setPrice(articleRequest.getPrice());
            article.setLabel(articleRequest.getLabel());
            article.setPicture(articleRequest.getPicture());
            return articleRepository.save(article);
        }).orElseThrow(() -> new ResourceNotFoundException("ArticleId " + articleId + " not found"));
    }

    // Delete an article
    @DeleteMapping("/delete/{articleId}")
    public ResponseEntity<?> deleteArticle(@PathVariable(value = "articleId") Long articleId) {
        return articleRepository.findById(articleId).map(article -> {
            articleRepository.delete(article);
            return ResponseEntity.ok().build();
        }).orElseThrow(() -> new ResourceNotFoundException("Article not found with id " + articleId));
    }
}
